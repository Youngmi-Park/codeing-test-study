'''
2019 KAKAO BLIND RECRUITMENT
무지의 먹방 라이브
link: https://school.programmers.co.kr/learn/courses/30/lessons/42891

문제 설명
먹어야 할 N개의 음식, 음식에는 1부터 N까지 번호 부여
각 음식을 먹는데는 일정 시간이 소요된다.

1. 무지는 1번 음식부터 먹기 시작하며, 회전판은 번호가 증가하는 순서대로 음식을 무지 앞으로 가져다 놓는다.
2. 마지막 번호의 음식을 섭취한 후에는 회전판에 의해 다시 1번 음식이 무지 앞으로 온다.
3. 무지는 음식 하나를 1초 동안 섭취한 후 남은 음식은 그대로 두고, 다음 음식을 섭취한다.
다음 음식이란, 아직 남은 음식 중 다음으로 섭취해야 할 가장 가까운 번호의 음식을 말한다.
4. 회전판이 다음 음식을 무지 앞으로 가져오는데 걸리는 시간은 없다고 가정한다.

먹방 시작 k초 후 잠시 방송이 중단되었다. 다시 방송을 이어갈 때 몇번 음식부터 섭취해야하는가

문제풀이 아이디어
heap 자료구조 사용, (음식 시간, 음식 번호)를 넣고 시간이 짧은 음식부터 삭제한다.
해당 음식을 먹는데 걸리는 시간을 계산한다.
- 음식 먹는데 걸리는 시간: (남은 음식을 먹는 시간) * (남은 음식의 개수)
- 남은 음식을 먹는 시간: 원래 음식 시간 - 이전 음식 먹는 시간
k 시간 안에서 다 먹을 수 있으면 음식을 제거한다.
- k에서 음식 먹는 시간을 빼준다.
- 이전 음식 먹는 시간을 갱신
'''
import heapq

def solution(food_times, k):
    if sum(food_times) <= k: # 전체 음식을 섭취하는 시간보다 k가 크면 이미 모든 음식을 섭취한 상태
        return -1 # 더 이상 섭취할 음식이 없으므로 -1을 반환
    
    answer = -1
    n = len(food_times) # 음식 개수
    heap = [] # heap
    
    for i in range(len(food_times)):
        heapq.heappush(heap, (food_times[i], i+1)) # heap 자료구조 사용, (음식 시간, 음식 번호)
        
    prev = 0 # 이전 음식 시간
    while heap:
        t = (heap[0][0] - prev) * n # (가장 작은 음식 시간 - 이전 음식 시간) * n
        
        if k >= t: # 현재 음식을 먹는 시간이 k 이하라면, 음식을 다 먹을 수 있다.
            k -= t # k에서 현재 음식 먹는 시간을 뺀다. 
            prev = heapq.heappop(heap)[0] # 다 먹은 음식 제거, 이전 음식 시간 갱신
            n -=  1 # 음식 개수 -1 
        else: # 현재 음식을 먹는 시간이 k를 초과한다면
            heap.sort(key=lambda x: x[1]) # 음식 번호에 대해서 재정렬
            answer = heap[k % n][1] # 현재 음식을 다 먹지는 못하므로 나머지를 구한다, [1]은 음식 번호   
            break
            
    return answer
