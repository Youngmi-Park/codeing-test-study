'''
7장 이진탐색 실전문제3 - 떡볶이 떡 만들기
난이도: 중, 풀이시간: 40분, 시간제한: 2초, 메모리제한: 128MB

문제설명
길이가 일정하지 않은 떡
한 봉지 안에 들어가는 떡의 총 길이는 절단기로 잘라서 맞춰준다.
절단기 높이 H만큼 절단하면 나머지는 손님이 가져간다.
절단기에 설정할 수 있는 높이의 최대값을 구하는 프로그램

입력조건
첫째 줄 떡의 개수 N, 요청한 떡의 길이 M (1<=N<=1,000,000 , 1<=M<=2,000,000,000)
둘째 줄 떡의 개별 높이, 떡 높이의 총합은 항상 M 이상
손님은 필요한 양만큼 사갈 수 있고, 높이는 10억보다 작거나 같은 양의 정수 또는 0 이다.

출력조건
적어도 M만큼 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최대값을 출력한다.

문제풀이 아이디어
파라메트릭 서치 유형의 문제
절단기 높이 h를 반복해서 조정한다.
이진탐색으로 범위를 좁혀가며 요청한 떡의 길이 m을 만족하는지 확인한다.
가장 길이가 긴 떡을 기준으로 탐색한다.
이때 절단기의 최대 높이를 구해야한다. 
'''
n, m = map(int, input().split()) # 떡의 개수, 요청한 떡의 길이
array = list(map(int, input().split())) # n개 떡의 길이

def binary_search(array, target, start, end):
  while start <= end:
    total = 0
    mid = (start + end) // 2
    # 자른 떡의 길이 합
    for i in array:
      if i > mid: # 떡의 길이가 자르려는 길이보다 길 때 자를 수 있음
        total += (i - mid)

    # 자른 떡의 길이와 요청한 떡의 길이 m이 같다면
    if total == target:
      return mid
    # 자른 떡의 길이가 요청한 떡의 길이보다 짧다면
    # 더 많이 잘라야함
    elif total < target:
      end = mid - 1
    # 자른 떡의 길이가 요청한 떡의 길이보다 길다면
    # 덜 잘라야함
    else:
      start = mid + 1
      
print(binary_search(array, m, 0, max(array)))
