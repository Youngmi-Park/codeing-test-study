'''
8장 다이나믹 프로그래밍 실전문제2 - 1로 만들기
난이도: 중하, 풀이시간: 20분, 시간제한: 2초, 메모리제한: 128MB

문제설명
정수 X가 주어질 때 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지이다.
a X가 5로 나누어떨어지면, 5로 나눈다.
b X가 3으로 나누어떨어지면, 3으로 나눈다.
c X가 2로 나누어떨어지면, 2로 나눈다.
d X에서 1을 뺀다.
X가 주어졌을 때 연산 4개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값ㅇ르 출력하시오.
예를 들어 정수가 26이면 다음과 같이 계산해서 3번의 연산이 최솟값이다.
1. 26 - 1
2. 25/5 = 5
3. 5/5 = 1

입력조건
첫째 줄에 정수 X가 주어진다.(1<=X<=30,000)

출력조건
첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.
문제 풀이 아이디어
최대 입력조건에 맞는 배열을 생성(0으로 초기화한다.)

문제풀이 아이디어
동일한 함수에서 구하는 값들이 동일하게 나와야한다.
다이나믹 프로그래밍을 이용하여 풀 수 있음(보텀업방식으로 구현)
문제의 점화식: ai = min(ai-1, ai/2, ai/3, ai/5) + 1
'''
# 입력으로 들어올 수 있는 정수 x에 대해 최대 배열을 생성한다.
# 이때 배열의 값은 모두 0으로 초기화
x = int(input()) # 정수 x
dp = [0] * 30 # 입력은 1 <= x <= 30,000

# 1을 만드는 것이니까 1일때는 연산 횟수 0

# 보텀업 방식 이용
for i in range(2, x+1):
  # 1을 뺐을 때 연산 수를 구함
  dp[i] = dp[i-1] + 1
  # 연산을 사용하는 최솟값이기때문에 5 3 2로 나누어지는 경우와 비교해서 작은 값이 최종 연산 수이다.
  if i % 5 == 0: # 5로 나누어지면   
    # 나누었을 때 숫자에 해당하는 연산 횟수 + 1
    dp[i] = min(dp[i//5] + 1, dp[i]) 
  elif i % 3 == 0: # 3으로 나누어지면
    dp[i] = min(dp[i//3] + 1, dp[i])
  elif i % 2 == 0: # 2로 나누어지면
    dp[i] = min(dp[i//2] + 1, dp[i])
  # 4가지 경우 중에서 가작 적은 값을 가지는 걸 골라 업데이트

print(dp[x])
